#!/bin/bash

set -e -E -u -o pipefail -o noclobber -o noglob +o braceexpand || exit -- 1
trap 'printf -- "[ee] failed: %s\n" "${BASH_COMMAND}" >&2' ERR || exit -- 1
test "${#}" -eq 0
export -- LC_ALL=C


cat <<'EOS'

<< compile / peg
	test "${#}" -eq 0
	if test ./sources/parser_peg.peg -nt ./sources/parser_peg.rs ; then
		if test -e ./sources/parser_peg.rs ; then
			rm -- ./sources/parser_peg.rs
		fi
		rust-peg < ./sources/parser_peg.peg >| ./sources/.parser_peg.rs.tmp1
		rust-fmt < ./sources/.parser_peg.rs.tmp1 >| ./sources/.parser_peg.rs.tmp2 && _outcome=0 || _outcome="${?}"
		if test "${_outcome}" -ne 3 ; then
			exit -- "${_outcome}"
		fi
		mv -T -- ./sources/.parser_peg.rs.tmp2 ./sources/parser_peg.rs
		rm -- ./sources/.parser_peg.rs.tmp1
	fi
!!

:: compile / bin / debug :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo build --bin rust-scheme "${@}"
:: compile / bin / release :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo build --bin rust-scheme --release --all-features "${@}"

:: compile / lib / debug :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo build --lib "${@}"
:: compile / lib / release :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo build --lib --release --all-features "${@}"

:: compile / doc / debug :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo doc --all-features "${@}"
:: compile / doc / release :: x-run ':: compile / peg' ; exec -- less-exec env PATH="${RUST_PATH}" cargo doc --release --all-features "${@}"

<< compile / lib / source
	x-run ':: compile / peg'
	env PATH="${RUST_PATH}" rustc -Z unstable-options --pretty=expanded -- ./sources/lib.rs \
	| ( rust-fmt 2> /dev/null || true ) \
	| sed -r -n \
			-e ': b' \
			-e '/^$/ d' \
			-e '/^\#\[macro_export\]$/ d' \
			-e '/^\#\[allow\(unused_macros\)\]$/ d' \
			-e '/^macro_rules!/ b d' \
			-e 'p' \
			-e 'b' \
			-e ': d' -e 'n' -e '/^ +/! b b' -e 'b d' \
	#
!!

:: execute / bin / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo run -- "${@}"
:: execute / bin / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo run --release -- "${@}"

:: execute / test / all / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" time -f '\n(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --all-features --jobs 1 -- --test-threads 1 "${@}"
:: execute / test / all / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" time -f '\n(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --release --all-features --jobs 1 -- --test-threads 1 "${@}"

:: browse / doc :: exec -- x-www open file://"$( readlink -e -- ./target/doc/rust_scheme/index.html )"
:: browse / r7rs :: exec -- x-www open file://"$( readlink -e -- ./documentation/external/r7rs-small-spec/stripped/r7rs.pdf )"

:: clean :: exec -- rm -R -f ./target/

:: grep / sources / x-selection / primary :: exec -- git grep -C10 -F -e "$( exec -- x-selection primary output )" -- ./sources
:: grep / sources / unimplemented :: exec -- git grep -C10 -F -e 'fail_unimplemented!' -e 'failed_unimplemented!' -e 'unimplemented!' -- ./sources
:: grep / sources / primitives / unimplemented :: exec -- git grep -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/primitives*.rs'
:: grep / sources / builtins / unimplemented :: exec -- git grep -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/builtins*.rs'

<< rust-up / initialize
	test "${#}" -eq 0
	if test ! -e ./.rust ; then
		mkdir -- ./.rust
		mkdir -- ./.rust/rustup
		mkdir -- ./.rust/cargo
		curl -s -o ./.rust/rustup-init.tmp -- https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
		chmod +x -- ./.rust/rustup-init.tmp
		mv -n -T -- ./.rust/rustup-init.tmp ./.rust/rustup-init
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		./.rust/rustup-init -v -y --no-modify-path
	fi
!!

<< rust-up / install
	test "${#}" -eq 0
	test -e ./.rust
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	exec -- ./.rust/cargo/bin/rustup install stable
	exec -- ./.rust/cargo/bin/rustup install nightly
!!

<< rust-up / update
	test "${#}" -eq 0
	test -e ./.rust
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	exec -- ./.rust/cargo/bin/rustup update
!!

:: rust-up / use / stable :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin ):${PATH}"
:: rust-up / use / nightly :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):${PATH}"

:: cargo / enable / incremental :: export -- CARGO_INCREMENTAL=1
:: cargo / disable / incremental :: export -- CARGO_INCREMENTAL=0

:: tests / enable / debug :: export -- RUST_SCHEME_TESTS_DEBUG=true
:: tests / disable / debug :: export -- RUST_SCHEME_TESTS_DEBUG=false

EOS


for _test in scheme low-level-r7rs low-level-parser low-level-sizes low-level-assertions ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: execute / test / @{TEST} / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '\n(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test @{TEST} --all-features --jobs 1 -- --nocapture --test-threads 1 "${@}"
:: execute / test / @{TEST} / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '\n(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test @{TEST} --release --all-features --jobs 1 -- --nocapture --test-threads 1 "${@}"
:: execute / test / @{TEST} / benchmark :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '\n(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo bench --test @{TEST} --all-features --jobs 1 -- --nocapture --test-threads 1 "${@}"
EOS
done


find . -xdev -type f -name '*.rs' -printf ':: edit / %P :: exec -- sce %p\n' | sort
find . -xdev -type f -name '*.rs' -printf ':: view / %P :: exec -- less %p\n' | sort


exit -- 0

