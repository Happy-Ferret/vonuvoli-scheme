#!/bin/bash

set -e -E -u -o pipefail -o noclobber -o noglob +o braceexpand || exit -- 1
trap 'printf -- "[ee] failed: %s\n" "${BASH_COMMAND}" >&2' ERR || exit -- 1
test "${#}" -eq 0
export -- LC_ALL=C


if test -e ./.x-run.options -a ./.x-run.options -nt ./.x-run ; then
	exec -- cat -- ./.x-run.options
	exit -- 1
else
	exec {_stdout_fd}<&1
	exec >| ./.x-run.options.tmp1
fi




cat <<'EOS'

<< compile / peg
	test "${#}" -eq 0
	if test ./sources/parser_peg.peg -nt ./sources/parser_peg.rs ; then
		if test -e ./sources/parser_peg.rs ; then
			rm -- ./sources/parser_peg.rs
		fi
		rust-peg < ./sources/parser_peg.peg >| ./sources/.parser_peg.rs.tmp1
		rust-fmt < ./sources/.parser_peg.rs.tmp1 >| ./sources/.parser_peg.rs.tmp2 && _outcome=0 || _outcome="${?}"
		if test "${_outcome}" -ne 3 ; then
			exit -- "${_outcome}"
		fi
		mv -T -- ./sources/.parser_peg.rs.tmp2 ./sources/parser_peg.rs
		rm -- ./sources/.parser_peg.rs.tmp1
	fi
!!

:: compile / bin / interpreter / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --bin rust-scheme-interpreter "${@}"
:: compile / bin / interpreter / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --bin rust-scheme-interpreter --release --all-features "${@}"

:: compile / bin / compiler / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --bin rust-scheme-compiler "${@}"
:: compile / bin / compiler / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --bin rust-scheme-compiler --release --all-features "${@}"

:: compile / lib / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --lib "${@}"
:: compile / lib / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo build --lib --release --all-features "${@}"

:: compile / doc / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo doc --all-features "${@}"
:: compile / doc / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" cargo doc --release --all-features "${@}"

<< compile / lib / source
	x-run ':: compile / peg'
	env PATH="${RUST_PATH}" \
			rustc \
					-Z unstable-options \
					--pretty=expanded \
					-- ./sources/lib.rs \
	| x-run ':: execute / rust-fmt'
!!

<< compile / test / scheme / source
	x-run ':: compile / lib / debug'
	env PATH="${RUST_PATH}" \
			rustc \
					--test \
					--extern rust_scheme=./target/debug/librust_scheme.rlib \
					-Z unstable-options \
					--pretty=expanded \
					-- ./tests/scheme.rs \
	| x-run ':: execute / rust-fmt'
!!

<< execute / rust-fmt
	( rust-fmt "${@}" 2> /dev/null || true ) \
	| sed -r -n \
			-e ': b' \
			-e '/^$/ d' \
			-e '/^\#\[macro_use\]$/ d' \
			-e '/^\#\[macro_export\]$/ d' \
			-e '/^\#\[allow\(unused_macros\)\]$/ d' \
			-e '/^macro_rules!/ b d' \
			-e 'p' \
			-e 'b' \
			-e ': d' -e 'n' -e '/^ +/! b b' -e 'b d' \
	#
!!

:: execute / bin / interpreter / debug :: x-run ':: compile / bin / interpreter / debug' ; exec -- ./target/debug/rust-scheme-interpreter "${@}"
:: execute / bin / interpreter / release :: x-run ':: compile / bin / interpreter / release' ; exec -- ./target/release/rust-scheme-interpreter "${@}"

:: execute / bin / compiler / debug :: x-run ':: compile / bin / compiler / debug' ; exec -- ./target/debug/rust-scheme-compiler "${@}"
:: execute / bin / compiler / release :: x-run ':: compile / bin / compiler / release' ; exec -- ./target/release/rust-scheme-compiler "${@}"

:: execute / test / all / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --all-features --jobs 1 -- --test-threads 1 --test 'test__' "${@}"
:: execute / test / all / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --release --all-features --jobs 1 -- --test-threads 1 --test 'test__' "${@}"
:: execute / test / all / benchmark :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --release --all-features --jobs 1 -- --test-threads 1 --bench 'benchmark__' "${@}"

:: browse / doc :: exec -- x-www open file://"$( readlink -e -- ./target/doc/rust_scheme/index.html )"
:: browse / r7rs :: exec -- x-www open file://"$( readlink -e -- ./documentation/external/r7rs-small-spec/stripped/r7rs.pdf )"

:: compile / clean :: exec -- rm -R -f ./target/

:: files / grep / sources / x-selection / primary :: exec -- git grep --no-index -C10 -F -e "$( exec -- x-selection primary output )" -- ./sources
:: files / grep / sources / unimplemented :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- ./sources
:: files / grep / sources / primitives / unimplemented :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/primitives*.rs'
:: files / grep / sources / builtins / unimplemented :: exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/builtins*.rs'
:: files / grep / sources / string :: exec -- git grep --no-index -C10 -F "${@/#/-e}" -- ./sources
:: files / grep / sources / regexp :: exec -- git grep --no-index -C10 -P "${@/#/-e}" -- ./sources

<< execute / rust-up / initialize
	test "${#}" -eq 0
	if test ! -e ./.rust ; then
		mkdir -- ./.rust
		mkdir -- ./.rust/rustup
		mkdir -- ./.rust/cargo
		curl -s -o ./.rust/rustup-init.tmp -- https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
		chmod +x -- ./.rust/rustup-init.tmp
		mv -n -T -- ./.rust/rustup-init.tmp ./.rust/rustup-init
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		./.rust/rustup-init -v -y --no-modify-path
	fi
!!

<< execute / rust-up / install
	test "${#}" -eq 0
	test -e ./.rust
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	exec -- ./.rust/cargo/bin/rustup install stable
	exec -- ./.rust/cargo/bin/rustup install nightly
!!

<< execute / rust-up / update
	test "${#}" -eq 0
	test -e ./.rust
	export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
	export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
	exec -- ./.rust/cargo/bin/rustup update
!!

:: environment / rust-up / use / stable :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin ):${PATH}"
:: environment / rust-up / use / nightly :: export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):${PATH}"

:: environment / cargo / incremental / enable :: export -- CARGO_INCREMENTAL=1
:: environment / cargo / incremental / disable :: export -- CARGO_INCREMENTAL=0

:: environment / tests / debug / enable :: export -- RUST_SCHEME_TESTS_DEBUG=true
:: environment / tests / debug / disable :: export -- RUST_SCHEME_TESTS_DEBUG=false

EOS


for _test in scheme low-level-r7rs low-level-parser low-level-sizes low-level-assertions ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: execute / test / @{TEST} / tests / all / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test '@{TEST}' --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
:: execute / test / @{TEST} / tests / all / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test '@{TEST}' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
:: execute / test / @{TEST} / benchmarks / all / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test '@{TEST}' --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'benchmark__' "${@}"
:: execute / test / @{TEST} / benchmarks / all / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test '@{TEST}' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
EOS
done

find ./tests/scheme -type f -name '*.sst' -printf '%f\n' \
| sed -r -e 's/\.sst$//' -e 's/-/_/g' \
| sort -u \
| while read _test ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: execute / test / scheme / tests / @{TEST} / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test scheme --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__@{TEST}' --exact "${@}"
:: execute / test / scheme / tests / @{TEST} / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__@{TEST}' --exact "${@}"
:: execute / test / scheme / benchmarks / @{TEST} / debug :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test scheme --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'benchmark__@{TEST}' --exact "${@}"
:: execute / test / scheme / benchmarks / @{TEST} / release :: x-run ':: compile / peg' ; exec -- env PATH="${RUST_PATH}" RUST_BACKTRACE=1 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__@{TEST}' --exact "${@}"
EOS
done


find ./tests/scripts -type f -name 'benchmark--*.ss' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / bin / compiler / scheme / @{SCRIPT} / debug :: x-run ':: compile / bin / compiler / debug' --quiet ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--@{SCRIPT}.ss' >| './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-compile.out'
:: execute / bin / compiler / scheme / @{SCRIPT} / release :: x-run ':: compile / bin / compiler / release' --quiet ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < ./tests/scripts/benchmark--@{SCRIPT}.ss' >| './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-compile.out'
:: execute / benchmark / scheme / @{SCRIPT} / debug :: x-run ':: compile / bin / interpreter / debug' --quiet ; exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-interpreter < './tests/scripts/benchmark--@{SCRIPT}.ss' >| './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-debug.out' ; exec -- cat -- './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-debug.out'
:: execute / benchmark / scheme / @{SCRIPT} / release :: x-run ':: compile / bin / interpreter / release' --quiet ; exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-interpreter < './tests/scripts/benchmark--@{SCRIPT}.ss' >| './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-release.out' ; exec -- cat -- './tests/scripts/_out/benchmark--@{SCRIPT}--scheme-release.out'
:: execute / benchmark / chibi / @{SCRIPT} :: exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.time -- './tests/scripts/benchmark--@{SCRIPT}.ss' >| './tests/scripts/_out/benchmark--@{SCRIPT}--chibi.out' ; exec -- cat -- './tests/scripts/_out/benchmark--@{SCRIPT}--chibi.out'
EOS
done


find ./tests/scripts -type f -name 'benchmark--*.py' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.py$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / benchmark / python / @{SCRIPT} :: exec -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u -- './tests/scripts/benchmark--@{SCRIPT}.py' >| './tests/scripts/_out/benchmark--@{SCRIPT}--python.out' ; exec -- cat -- './tests/scripts/_out/benchmark--@{SCRIPT}--python.out'
EOS
done


find ./tests/scripts -type f \( -name 'benchmark--*.ss' -o -name 'benchmark--*.py' \) -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' -e 's/\.py$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
<< execute / benchmark / compare / @{SCRIPT}
	printf -- '\n== scheme / release ==\n'
	x-run ':: execute / benchmark / scheme / @{SCRIPT} / release'
	printf -- '\n== chibi ==\n'
	x-run ':: execute / benchmark / chibi / @{SCRIPT}'
	printf -- '\n== python ==\n'
	x-run ':: execute / benchmark / python / @{SCRIPT}'
!!
EOS
done

printf -- '%s\n' '<< execute / benchmark / compare / all'
find ./tests/scripts -type f -name 'benchmark--*.ss' -printf '%f\n' \
| sed -r -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
printf -- '%s\n' "x-run ':: execute / benchmark / compare / ${_script}'"
done
printf -- '%s\n' '!!'


find ./tests/scripts -type f \( -name 'optimizer--*.ss' -o -name 'benchmark--*.ss' \) -printf '%f\n' \
| sed -r -e 's/^optimizer--//' -e 's/^benchmark--//' -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
:: execute / optimizer / scheme / @{SCRIPT} / debug :: x-run ':: compile / bin / compiler / debug' --quiet ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--@{SCRIPT}.ss' >| './tests/scripts/_out/optimizer--@{SCRIPT}--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--@{SCRIPT}--scheme-compile.out'
:: execute / optimizer / scheme / @{SCRIPT} / release :: x-run ':: compile / bin / compiler / release' --quiet ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < './tests/scripts/optimizer--@{SCRIPT}.ss' >| './tests/scripts/_out/optimizer--@{SCRIPT}--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--@{SCRIPT}--scheme-compile.out'
EOS
done

printf -- '%s\n' '<< execute / optimizer / scheme / all / release'
printf -- '%s\n' "x-run ':: compile / bin / compiler / release'"
find ./tests/scripts -type f \( -name 'optimizer--*.ss' -o -name 'benchmark--*.ss' \) -printf '%f\n' \
| sed -r -e 's/\.ss$//' \
| sort -u \
| while read _script ; do
sed -r -e 's#@\{SCRIPT\}#'"${_script}"'#g' <<'EOS'
./target/release/rust-scheme-compiler < './tests/scripts/@{SCRIPT}.ss' >| './tests/scripts/_out/@{SCRIPT}--scheme-compile.out'
EOS
done
printf -- '%s\n' '!!'


find . -xdev -type f -name '*.rs' -printf ':: files / edit / %P :: exec -- sce %p\n' | sort
find . -xdev -type f -name '*.rs' -printf ':: files / view / %P :: exec -- less -- %p\n' | sort

find . -xdev -type f -name '*.sst' -printf ':: files / edit / %P :: exec -- sce %p\n' | sort
find . -xdev -type f -name '*.sst' -printf ':: files / view / %P :: exec -- less -- %p\n' | sort




if true ; then
	exec 1>&"${_stdout_fd}"-
	X_RUN_ACTION=parse x-run < ./.x-run.options.tmp1 >| ./.x-run.options.tmp2
	mv -T -- ./.x-run.options.tmp2 ./.x-run.options
	rm -- ./.x-run.options.tmp1
	exec cat -- ./.x-run.options
	exit -- 1
fi

exit -- 0

