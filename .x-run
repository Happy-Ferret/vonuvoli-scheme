#!/bin/bash

set -e -E -u -o pipefail -o noclobber -o noglob +o braceexpand || exit -- 1
trap 'printf -- "[ee] failed: %s\n" "${BASH_COMMAND}" >&2' ERR || exit -- 1
test "${#}" -eq 0
export -- LC_ALL=C


cat <<'EOS'

<< compile / peg
	test "${#}" -eq 0
	if test ./sources/parser_peg.peg -nt ./sources/parser_peg.rs ; then
		rust-peg < ./sources/parser_peg.peg >| ./sources/.parser_peg.rs.tmp1
		rust-fmt < ./sources/.parser_peg.rs.tmp1 >| ./sources/.parser_peg.rs.tmp2 || test "${?}" -eq 3
		mv -T -- ./sources/.parser_peg.rs.tmp2 ./sources/parser_peg.rs
		rm -- ./sources/.parser_peg.rs.tmp1
	fi
!!

:: compile / bin / debug :: x-run ':: compile / peg' ; exec -- less-exec cargo build --all-features "${@}"
:: compile / bin / release :: x-run ':: compile / peg' ; exec -- less-exec cargo build --all-features --release "${@}"

:: compile / doc / debug :: x-run ':: compile / peg' ; exec -- less-exec cargo doc --all-features "${@}"
:: compile / doc / release :: x-run ':: compile / peg' ; exec -- less-exec cargo doc --all-features --release "${@}"

:: execute / bin / debug :: x-run ':: compile / peg' ; exec -- cargo run -- "${@}"
:: execute / bin / release :: x-run ':: compile / peg' ; exec -- cargo run --release -- "${@}"

:: execute / test / all :: x-run ':: compile / peg' ; export -- RUSTFLAGS=-Awarnings ; exec -- less-exec cargo test -- "${@}"

:: browse / doc :: exec -- x-www open file://"$( readlink -e -- ./target/doc/rust_scheme/index.html )"

:: clean :: exec -- rm -R -f ./target/

EOS


for _test in sizes values parser expressions contexts compiler evaluator r7rs counters ; do
sed -r -e 's#@\{TEST\}#'"${_test}"'#g' <<'EOS'
:: execute / test / @{TEST} :: x-run ':: compile / peg' ; export -- RUSTFLAGS=-Awarnings RUST_BACKTRACE=1 ; exec -- less-exec cargo test --test @{TEST} -- --nocapture "${@}"
EOS
done


find . -xdev -type f -name '*.rs' -printf ':: edit / %P :: exec -- sce %p\n' | sort


exit -- 0
