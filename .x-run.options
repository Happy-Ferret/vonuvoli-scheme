
<< compile / peg
		test "${#}" -eq 0
		if test ./sources/parser_peg.peg -nt ./sources/parser_peg.rs ; then
			printf -- '== compile / peg ==\n' >&2
			if test -e ./sources/parser_peg.rs ; then
				rm -- ./sources/parser_peg.rs
			fi
			rust-peg < ./sources/parser_peg.peg >| ./sources/.parser_peg.rs.tmp1
			rust-fmt < ./sources/.parser_peg.rs.tmp1 >| ./sources/.parser_peg.rs.tmp2 && _outcome=0 || _outcome="${?}"
			if test "${_outcome}" -ne 3 ; then
				exit -- "${_outcome}"
			fi
			mv -T -- ./sources/.parser_peg.rs.tmp2 ./sources/parser_peg.rs
			rm -- ./sources/.parser_peg.rs.tmp1
		fi
!!

<< compile / lib / debug
	x-run ':: compile / peg' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --lib --no-default-features "${@}"
!!

<< compile / lib / release
	x-run ':: compile / peg' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --lib --release --all-features "${@}"
!!

<< compile / bin / interpreter / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --bin rust-scheme-interpreter --no-default-features "${@}"
!!

<< compile / bin / interpreter / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --bin rust-scheme-interpreter --release --all-features "${@}"
!!

<< compile / bin / compiler / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --bin rust-scheme-compiler --no-default-features "${@}"
!!

<< compile / bin / compiler / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --bin rust-scheme-compiler --release --all-features "${@}"
!!

<< compile / doc / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo doc --quiet --no-default-features "${@}"
!!

<< compile / doc / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo doc --quiet --release --all-features "${@}"
!!

<< compile / lib / source
		x-run ':: compile / lib / debug'
		env PATH="${RUST_PATH}" \
				rustc \
						-Z unstable-options \
						--pretty=expanded \
						-- ./sources/lib.rs \
		| x-run ':: execute / rust-fmt'
!!

<< compile / test / scheme / source
		x-run ':: compile / lib / debug'
		env PATH="${RUST_PATH}" \
				rustc \
						--test \
						--extern rust_scheme=./target/debug/librust_scheme.rlib \
						-Z unstable-options \
						--pretty=expanded \
						-- ./tests/scheme.rs \
		| x-run ':: execute / rust-fmt'
!!

<< execute / rust-fmt
		( rust-fmt "${@}" 2> /dev/null || true ) \
		| sed -r -n \
				-e ': b' \
				-e '/^$/ d' \
				-e '/^\#\[macro_use\]$/ d' \
				-e '/^\#\[macro_export\]$/ d' \
				-e '/^\#\[allow\(unused_macros\)\]$/ d' \
				-e '/^macro_rules!/ b d' \
				-e 'p' \
				-e 'b' \
				-e ': d' -e 'n' -e '/^ +/! b b' -e 'b d' \
		#
!!

<< execute / bin / interpreter / debug
	x-run ':: compile / bin / interpreter / debug' ; exec -- ./target/debug/rust-scheme-interpreter "${@}"
!!

<< execute / bin / interpreter / release
	x-run ':: compile / bin / interpreter / release' ; exec -- ./target/release/rust-scheme-interpreter "${@}"
!!

<< execute / bin / compiler / debug
	x-run ':: compile / bin / compiler / debug' ; exec -- ./target/debug/rust-scheme-compiler "${@}"
!!

<< execute / bin / compiler / release
	x-run ':: compile / bin / compiler / release' ; exec -- ./target/release/rust-scheme-compiler "${@}"
!!

<< compile / test / all / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --no-default-features --no-run
!!

<< compile / test / all / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --release --all-features --no-run
!!

<< execute / test / all / debug
	x-run ':: compile / test / all / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --no-default-features --jobs 1 -- --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / all / release
	x-run ':: compile / test / all / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --release --all-features --jobs 1 -- --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / all / benchmark
	x-run ':: compile / test / all / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --release --all-features --jobs 1 -- --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< browse / doc
	exec -- x-www open file://"$( readlink -e -- ./target/doc/rust_scheme/index.html )"
!!

<< browse / coverage
	exec -- x-www open file://"$( readlink -e -- ./target/cov/index.html )"
!!

<< browse / r7rs
	exec -- x-www open file://"$( readlink -e -- ./documentation/external/r7rs-small-spec/stripped/r7rs.pdf )"
!!

<< compile / clean
	exec -- find ./target/ -xdev -depth -print -delete
!!

<< files / grep / sources / x-selection / primary
	exec -- git grep --no-index -C10 -F -e "$( exec -- x-selection primary output )" -- ./sources
!!

<< files / grep / sources / unimplemented / show
	exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- ./sources
!!

<< files / grep / sources / unimplemented / list
	exec -- git grep --no-index -l -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- ./sources
!!

<< files / grep / sources / primitives / unimplemented / show
	exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/primitives*.rs'
!!

<< files / grep / sources / builtins / unimplemented / show
	exec -- git grep --no-index -C10 -P -e 'unimplemented!(?!.*// (deferred|OK)$)' -- './sources/builtins*.rs'
!!

<< files / grep / sources / string
	exec -- git grep --no-index -C10 -F "${@/#/-e}" -- ./sources
!!

<< files / grep / sources / regexp
	exec -- git grep --no-index -C10 -P "${@/#/-e}" -- ./sources
!!

<< files / grep / sources / errors / duplicates / list
	grep -o -P -e '(?<=0x)[0-9a-f]{8}(?=[)])|(?<=")[0-9a-f]{8}(?=")' -h -r ./sources -r ./tests --include '*.rs' --include '*.in' | sort | uniq -d
!!

<< files / grep / sources / errors / duplicates / show
	x-run ':: files / grep / sources / errors / duplicates / list' | git grep --no-index -C0 -F -f /dev/stdin -- ./sources ./tests
!!

<< files / grep / sources / errors / improper / list
	grep -o -P -e '(?<=0x)([0-9a-f]{3,7}|[0-9a-f]{9,})(?=[)])|(?<=")([0-9a-f]{3,7}|[0-9a-f]{9,})(?=")' -h -r ./sources -r ./tests --include '*.rs' --include '*.in' | sort -u
!!

<< files / grep / sources / errors / improper / show
	x-run ':: files / grep / sources / errors / improper / list' | git grep --no-index -C2 -F -f /dev/stdin -- ./sources ./tests
!!

<< files / sed / sources / inline-always / disable
	exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ inline (never) ] // __inline_always__!' -i -- {} \;
!!

<< files / sed / sources / inline-always / enable
	exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(never\) \] // __inline_always__)$!\1#[ inline (always) ]!' -i -- {} \;
!!

<< files / sed / sources / inline-always / configurable
	exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ cfg_attr ( feature = "scheme_inline_always", inline (always) ) ]!' -i -- {} \;
!!

<< files / sed / sources / inline-always / to-plain
	exec -- find ./sources ./tests -xdev -type f \( -name '*.rs' -o -name '*.in' \) -exec sed -r -e 's!^(\s*)(#\[ inline \(always\) \])$!\1#[ inline ]!' -e 's!^(\s*)(#\[ cfg_attr \( feature = "scheme_inline_always", inline \(always\) \) \])$!\1#[ cfg_attr ( feature = "scheme_inline_always", inline ) ]!' -i -- {} \;
!!

<< files / grep / outputs / benchmarks
	git diff --color-words -U0 -- ./tests/scheme/_out/benchmark__* | grep -E -e '^....--' -e 'average.*/' | sed -r -e 's/^(....)--- i\/tests\/scheme\/_out\/benchmark__/\1/'
!!

<< execute / rust-up / initialize
		test "${#}" -eq 0
		if test ! -e ./.rust ; then
			mkdir -- ./.rust
			mkdir -- ./.rust/rustup
			mkdir -- ./.rust/cargo
			curl -s -o ./.rust/rustup-init.tmp -- https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
			chmod +x -- ./.rust/rustup-init.tmp
			mv -n -T -- ./.rust/rustup-init.tmp ./.rust/rustup-init
			export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
			export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
			nice -n 19 -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./.rust/rustup-init -v -y --no-modify-path
		fi
!!

<< execute / rust-up / install
		test "${#}" -eq 0
		test -e ./.rust
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		nice -n 19 -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./.rust/cargo/bin/rustup install stable
		nice -n 19 -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./.rust/cargo/bin/rustup install nightly
!!

<< execute / rust-up / update
		test "${#}" -eq 0
		test -e ./.rust
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		nice -n 19 -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./.rust/cargo/bin/rustup update
!!

<< execute / cargo / install
		test "${#}" -eq 0
		test -e ./.rust
		export -- RUSTUP_HOME="$( exec -- readlink -e -- ./.rust/rustup )"
		export -- CARGO_HOME="$( exec -- readlink -e -- ./.rust/cargo )"
		export -- PATH="${RUST_PATH}"
		nice -n 19 -- time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo install cargo-kcov
!!

<< environment / rust-up / use / stable
	export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}"
!!

<< environment / rust-up / use / nightly
	export -- RUST_PATH="$( exec -- readlink -e -- ./.rust/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin ):$( exec -- readlink -e -- ./.rust/cargo/bin ):${PATH}"
!!

<< environment / rust / stack / 128M
	export -- RUST_MIN_STACK=134217728
!!

<< environment / rust / backtrace / enable
	export -- RUST_BACKTRACE=1
!!

<< environment / rust / backtrace / disable
	export -- RUST_BACKTRACE=0
!!

<< environment / tests / debug / enable
	export -- RUST_SCHEME_TESTS_DEBUG=true
!!

<< environment / tests / debug / disable
	export -- RUST_SCHEME_TESTS_DEBUG=false
!!

<< environment / taskset / all
	exec -- taskset -a -p -c 0-31 "${$}"
!!

<< environment / taskset / 0,2
	exec -- taskset -a -p -c 0,2 "${$}"
!!

<< environment / taskset / 3
	exec -- taskset -a -p -c 3 "${$}"
!!

<< compile / test / scheme / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'scheme' --no-default-features
!!

<< compile / test / scheme / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'scheme' --release --all-features
!!

<< execute / test / scheme / tests / all / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'scheme' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / scheme / tests / all / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'scheme' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / scheme / benchmarks / all / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'scheme' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / scheme / benchmarks / all / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'scheme' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / scheme / coverage / all / debug
	exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'scheme' --no-default-features --jobs 1 -- "${@}"
!!

<< execute / test / scheme / coverage / all / release
	exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'scheme' --release --all-features --jobs 1 -- "${@}"
!!

<< compile / test / low-level-r7rs / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-r7rs' --no-default-features
!!

<< compile / test / low-level-r7rs / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-r7rs' --release --all-features
!!

<< execute / test / low-level-r7rs / tests / all / debug
	x-run ':: compile / test / low-level-r7rs / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-r7rs' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-r7rs / tests / all / release
	x-run ':: compile / test / low-level-r7rs / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-r7rs' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-r7rs / benchmarks / all / debug
	x-run ':: compile / test / low-level-r7rs / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-r7rs' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-r7rs / benchmarks / all / release
	x-run ':: compile / test / low-level-r7rs / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-r7rs' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-r7rs / coverage / all / debug
	exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-r7rs' --no-default-features --jobs 1 -- "${@}"
!!

<< execute / test / low-level-r7rs / coverage / all / release
	exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-r7rs' --release --all-features --jobs 1 -- "${@}"
!!

<< compile / test / low-level-parser / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-parser' --no-default-features
!!

<< compile / test / low-level-parser / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-parser' --release --all-features
!!

<< execute / test / low-level-parser / tests / all / debug
	x-run ':: compile / test / low-level-parser / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-parser' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-parser / tests / all / release
	x-run ':: compile / test / low-level-parser / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-parser' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-parser / benchmarks / all / debug
	x-run ':: compile / test / low-level-parser / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-parser' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-parser / benchmarks / all / release
	x-run ':: compile / test / low-level-parser / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-parser' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-parser / coverage / all / debug
	exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-parser' --no-default-features --jobs 1 -- "${@}"
!!

<< execute / test / low-level-parser / coverage / all / release
	exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-parser' --release --all-features --jobs 1 -- "${@}"
!!

<< compile / test / low-level-sizes / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-sizes' --no-default-features
!!

<< compile / test / low-level-sizes / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-sizes' --release --all-features
!!

<< execute / test / low-level-sizes / tests / all / debug
	x-run ':: compile / test / low-level-sizes / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-sizes' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-sizes / tests / all / release
	x-run ':: compile / test / low-level-sizes / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-sizes' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-sizes / benchmarks / all / debug
	x-run ':: compile / test / low-level-sizes / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-sizes' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-sizes / benchmarks / all / release
	x-run ':: compile / test / low-level-sizes / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-sizes' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-sizes / coverage / all / debug
	exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-sizes' --no-default-features --jobs 1 -- "${@}"
!!

<< execute / test / low-level-sizes / coverage / all / release
	exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-sizes' --release --all-features --jobs 1 -- "${@}"
!!

<< compile / test / low-level-assertions / debug
	x-run ':: compile / lib / debug' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-assertions' --no-default-features
!!

<< compile / test / low-level-assertions / release
	x-run ':: compile / lib / release' ; exec -- nice -n 19 -- env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo build --quiet --test 'low-level-assertions' --release --all-features
!!

<< execute / test / low-level-assertions / tests / all / debug
	x-run ':: compile / test / low-level-assertions / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-assertions' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-assertions / tests / all / release
	x-run ':: compile / test / low-level-assertions / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-assertions' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__' "${@}"
!!

<< execute / test / low-level-assertions / benchmarks / all / debug
	x-run ':: compile / test / low-level-assertions / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-assertions' --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-assertions / benchmarks / all / release
	x-run ':: compile / test / low-level-assertions / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test 'low-level-assertions' --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__' "${@}"
!!

<< execute / test / low-level-assertions / coverage / all / debug
	exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-assertions' --no-default-features --jobs 1 -- "${@}"
!!

<< execute / test / low-level-assertions / coverage / all / release
	exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo kcov --test 'low-level-assertions' --release --all-features --jobs 1 -- "${@}"
!!

<< execute / test / scheme / tests / arithmetic / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__arithmetic' --exact "${@}"
!!

<< execute / test / scheme / tests / arithmetic / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__arithmetic' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / arithmetic / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__arithmetic' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / arithmetic / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__arithmetic' --exact "${@}"
!!

<< execute / test / scheme / tests / arrays / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__arrays' --exact "${@}"
!!

<< execute / test / scheme / tests / arrays / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__arrays' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / arrays / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__arrays' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / arrays / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__arrays' --exact "${@}"
!!

<< execute / test / scheme / tests / booleans / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__booleans' --exact "${@}"
!!

<< execute / test / scheme / tests / booleans / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__booleans' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / booleans / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__booleans' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / booleans / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__booleans' --exact "${@}"
!!

<< execute / test / scheme / tests / bytes / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__bytes' --exact "${@}"
!!

<< execute / test / scheme / tests / bytes / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__bytes' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / bytes / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__bytes' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / bytes / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__bytes' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_identity / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_identity' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_identity / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_identity' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_identity / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_identity' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_identity / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_identity' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_coerced / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_coerced' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_coerced / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_coerced' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_coerced / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_coerced' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_coerced / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_coerced' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_coerced_recursive / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_coerced_recursive' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_coerced_recursive / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_coerced_recursive' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_coerced_recursive / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_coerced_recursive' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_coerced_recursive / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_coerced_recursive' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_strict / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_strict' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_strict / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_strict' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_strict / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_strict' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_strict / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_strict' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_strict_recursive / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_strict_recursive' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_by_value_strict_recursive / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_by_value_strict_recursive' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_strict_recursive / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_strict_recursive' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_by_value_strict_recursive / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_by_value_strict_recursive' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_objects / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_objects' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_equivalent_objects / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_equivalent_objects' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_objects / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_objects' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_equivalent_objects / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_equivalent_objects' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_ordering_numbers / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_ordering_numbers' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_ordering_numbers / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_ordering_numbers' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_ordering_numbers / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_ordering_numbers' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_ordering_numbers / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_ordering_numbers' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_ordering_objects / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_ordering_objects' --exact "${@}"
!!

<< execute / test / scheme / tests / comparisons_ordering_objects / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__comparisons_ordering_objects' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_ordering_objects / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_ordering_objects' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / comparisons_ordering_objects / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__comparisons_ordering_objects' --exact "${@}"
!!

<< execute / test / scheme / tests / contexts / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__contexts' --exact "${@}"
!!

<< execute / test / scheme / tests / contexts / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__contexts' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / contexts / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__contexts' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / contexts / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__contexts' --exact "${@}"
!!

<< execute / test / scheme / tests / control / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__control' --exact "${@}"
!!

<< execute / test / scheme / tests / control / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__control' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / control / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__control' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / control / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__control' --exact "${@}"
!!

<< execute / test / scheme / tests / functions / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions' --exact "${@}"
!!

<< execute / test / scheme / tests / functions / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_arrays / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_arrays' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_arrays / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_arrays' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_arrays / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_arrays' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_arrays / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_arrays' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_bytes / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_bytes' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_bytes / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_bytes' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_bytes / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_bytes' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_bytes / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_bytes' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_lists / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_lists' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_lists / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_lists' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_lists / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_lists' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_lists / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_lists' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_strings / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_strings' --exact "${@}"
!!

<< execute / test / scheme / tests / functions_strings / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__functions_strings' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_strings / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_strings' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / functions_strings / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__functions_strings' --exact "${@}"
!!

<< execute / test / scheme / tests / issues / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__issues' --exact "${@}"
!!

<< execute / test / scheme / tests / issues / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__issues' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / issues / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__issues' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / issues / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__issues' --exact "${@}"
!!

<< execute / test / scheme / tests / lambdas / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__lambdas' --exact "${@}"
!!

<< execute / test / scheme / tests / lambdas / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__lambdas' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / lambdas / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__lambdas' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / lambdas / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__lambdas' --exact "${@}"
!!

<< execute / test / scheme / tests / lists / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__lists' --exact "${@}"
!!

<< execute / test / scheme / tests / lists / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__lists' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / lists / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__lists' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / lists / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__lists' --exact "${@}"
!!

<< execute / test / scheme / tests / loops / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__loops' --exact "${@}"
!!

<< execute / test / scheme / tests / loops / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__loops' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / loops / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__loops' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / loops / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__loops' --exact "${@}"
!!

<< execute / test / scheme / tests / pairs / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__pairs' --exact "${@}"
!!

<< execute / test / scheme / tests / pairs / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__pairs' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / pairs / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__pairs' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / pairs / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__pairs' --exact "${@}"
!!

<< execute / test / scheme / tests / ports / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports' --exact "${@}"
!!

<< execute / test / scheme / tests / ports / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports' --exact "${@}"
!!

<< execute / test / scheme / tests / ports_memory / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports_memory' --exact "${@}"
!!

<< execute / test / scheme / tests / ports_memory / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports_memory' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports_memory / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports_memory' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports_memory / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports_memory' --exact "${@}"
!!

<< execute / test / scheme / tests / ports_native / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports_native' --exact "${@}"
!!

<< execute / test / scheme / tests / ports_native / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__ports_native' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports_native / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports_native' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / ports_native / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__ports_native' --exact "${@}"
!!

<< execute / test / scheme / tests / quotation / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__quotation' --exact "${@}"
!!

<< execute / test / scheme / tests / quotation / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__quotation' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / quotation / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__quotation' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / quotation / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__quotation' --exact "${@}"
!!

<< execute / test / scheme / tests / runtime / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__runtime' --exact "${@}"
!!

<< execute / test / scheme / tests / runtime / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__runtime' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / runtime / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__runtime' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / runtime / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__runtime' --exact "${@}"
!!

<< execute / test / scheme / tests / scratchpad / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__scratchpad' --exact "${@}"
!!

<< execute / test / scheme / tests / scratchpad / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__scratchpad' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / scratchpad / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__scratchpad' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / scratchpad / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__scratchpad' --exact "${@}"
!!

<< execute / test / scheme / tests / strings / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__strings' --exact "${@}"
!!

<< execute / test / scheme / tests / strings / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__strings' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / strings / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__strings' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / strings / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__strings' --exact "${@}"
!!

<< execute / test / scheme / tests / types / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__types' --exact "${@}"
!!

<< execute / test / scheme / tests / types / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__types' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / types / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__types' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / types / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__types' --exact "${@}"
!!

<< execute / test / scheme / tests / values / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__values' --exact "${@}"
!!

<< execute / test / scheme / tests / values / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --test 'test__values' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / values / debug
	x-run ':: compile / test / scheme / debug' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --no-default-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__values' --exact "${@}"
!!

<< execute / test / scheme / benchmarks / values / release
	x-run ':: compile / test / scheme / release' ; exec -- taskset -c 2 env PATH="${RUST_PATH}" RUST_SCHEME_BENCHMARKS_OUTPUT='./tests/scheme/_out/{IDENTIFIER}.out' time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- cargo test --quiet --test scheme --release --all-features --jobs 1 -- --nocapture --test-threads 1 --bench 'benchmark__values' --exact "${@}"
!!

<< execute / bin / compiler / scheme / controls / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--controls--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / controls / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < ./tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--controls--scheme-compile.out'
!!

<< execute / benchmark / scheme / controls / debug
	x-run ':: compile / bin / interpreter / debug' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-interpreter < './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--scheme-debug.out' ; exec -- cat -- './tests/scripts/_out/benchmark--controls--scheme-debug.out'
!!

<< execute / benchmark / scheme / controls / release
	x-run ':: compile / bin / interpreter / release' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-interpreter < './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--scheme-release.out' ; exec -- cat -- './tests/scripts/_out/benchmark--controls--scheme-release.out'
!!

<< execute / benchmark / chibi / controls
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.time -- './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--chibi.out' ; exec -- cat -- './tests/scripts/_out/benchmark--controls--chibi.out'
!!

<< execute / benchmark / gauche / controls
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- gosh -b -r 7 < './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--gauche.out' ; exec -- cat -- './tests/scripts/_out/benchmark--controls--gauche.out'
!!

<< execute / bin / compiler / scheme / loop / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--loop--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / loop / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < ./tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--loop--scheme-compile.out'
!!

<< execute / benchmark / scheme / loop / debug
	x-run ':: compile / bin / interpreter / debug' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-interpreter < './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--scheme-debug.out' ; exec -- cat -- './tests/scripts/_out/benchmark--loop--scheme-debug.out'
!!

<< execute / benchmark / scheme / loop / release
	x-run ':: compile / bin / interpreter / release' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-interpreter < './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--scheme-release.out' ; exec -- cat -- './tests/scripts/_out/benchmark--loop--scheme-release.out'
!!

<< execute / benchmark / chibi / loop
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.time -- './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--chibi.out' ; exec -- cat -- './tests/scripts/_out/benchmark--loop--chibi.out'
!!

<< execute / benchmark / gauche / loop
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- gosh -b -r 7 < './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--gauche.out' ; exec -- cat -- './tests/scripts/_out/benchmark--loop--gauche.out'
!!

<< execute / bin / compiler / scheme / make-cons / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--make-cons--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-cons / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < ./tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--make-cons--scheme-compile.out'
!!

<< execute / benchmark / scheme / make-cons / debug
	x-run ':: compile / bin / interpreter / debug' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-interpreter < './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--scheme-debug.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-cons--scheme-debug.out'
!!

<< execute / benchmark / scheme / make-cons / release
	x-run ':: compile / bin / interpreter / release' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-interpreter < './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--scheme-release.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-cons--scheme-release.out'
!!

<< execute / benchmark / chibi / make-cons
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.time -- './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--chibi.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-cons--chibi.out'
!!

<< execute / benchmark / gauche / make-cons
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- gosh -b -r 7 < './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--gauche.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-cons--gauche.out'
!!

<< execute / bin / compiler / scheme / make-vector / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--make-vector--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-vector / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < ./tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/benchmark--make-vector--scheme-compile.out'
!!

<< execute / benchmark / scheme / make-vector / debug
	x-run ':: compile / bin / interpreter / debug' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-interpreter < './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--scheme-debug.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-vector--scheme-debug.out'
!!

<< execute / benchmark / scheme / make-vector / release
	x-run ':: compile / bin / interpreter / release' ; taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-interpreter < './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--scheme-release.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-vector--scheme-release.out'
!!

<< execute / benchmark / chibi / make-vector
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- chibi-scheme -m scheme.base -m scheme.time -- './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--chibi.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-vector--chibi.out'
!!

<< execute / benchmark / gauche / make-vector
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- gosh -b -r 7 < './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--gauche.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-vector--gauche.out'
!!

<< execute / benchmark / python / controls
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u -- './tests/scripts/benchmark--controls.py' >| './tests/scripts/_out/benchmark--controls--python.out' ; exec -- cat -- './tests/scripts/_out/benchmark--controls--python.out'
!!

<< execute / benchmark / python / loop
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u -- './tests/scripts/benchmark--loop.py' >| './tests/scripts/_out/benchmark--loop--python.out' ; exec -- cat -- './tests/scripts/_out/benchmark--loop--python.out'
!!

<< execute / benchmark / python / make-cons
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u -- './tests/scripts/benchmark--make-cons.py' >| './tests/scripts/_out/benchmark--make-cons--python.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-cons--python.out'
!!

<< execute / benchmark / python / make-vector
	taskset -c 2 time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- python2 -E -O -O -B -u -- './tests/scripts/benchmark--make-vector.py' >| './tests/scripts/_out/benchmark--make-vector--python.out' ; exec -- cat -- './tests/scripts/_out/benchmark--make-vector--python.out'
!!

<< execute / benchmark / compare / controls
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
		# printf -- '\n== %s / scheme / debug ==\n' 'controls' >&2
		# x-run ':: execute / benchmark / scheme / controls / debug'
		printf -- '\n== %s / scheme / release ==\n' 'controls' >&2
		x-run ':: execute / benchmark / scheme / controls / release'
		printf -- '\n== %s / chibi ==\n' 'controls' >&2
		x-run ':: execute / benchmark / chibi / controls'
		printf -- '\n== %s / gauche ==\n' 'controls' >&2
		x-run ':: execute / benchmark / gauche / controls'
		printf -- '\n== %s / python ==\n' 'controls' >&2
		x-run ':: execute / benchmark / python / controls'
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
!!

<< execute / benchmark / compare / loop
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
		# printf -- '\n== %s / scheme / debug ==\n' 'loop' >&2
		# x-run ':: execute / benchmark / scheme / loop / debug'
		printf -- '\n== %s / scheme / release ==\n' 'loop' >&2
		x-run ':: execute / benchmark / scheme / loop / release'
		printf -- '\n== %s / chibi ==\n' 'loop' >&2
		x-run ':: execute / benchmark / chibi / loop'
		printf -- '\n== %s / gauche ==\n' 'loop' >&2
		x-run ':: execute / benchmark / gauche / loop'
		printf -- '\n== %s / python ==\n' 'loop' >&2
		x-run ':: execute / benchmark / python / loop'
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
!!

<< execute / benchmark / compare / make-cons
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
		# printf -- '\n== %s / scheme / debug ==\n' 'make-cons' >&2
		# x-run ':: execute / benchmark / scheme / make-cons / debug'
		printf -- '\n== %s / scheme / release ==\n' 'make-cons' >&2
		x-run ':: execute / benchmark / scheme / make-cons / release'
		printf -- '\n== %s / chibi ==\n' 'make-cons' >&2
		x-run ':: execute / benchmark / chibi / make-cons'
		printf -- '\n== %s / gauche ==\n' 'make-cons' >&2
		x-run ':: execute / benchmark / gauche / make-cons'
		printf -- '\n== %s / python ==\n' 'make-cons' >&2
		x-run ':: execute / benchmark / python / make-cons'
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
!!

<< execute / benchmark / compare / make-vector
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
		# printf -- '\n== %s / scheme / debug ==\n' 'make-vector' >&2
		# x-run ':: execute / benchmark / scheme / make-vector / debug'
		printf -- '\n== %s / scheme / release ==\n' 'make-vector' >&2
		x-run ':: execute / benchmark / scheme / make-vector / release'
		printf -- '\n== %s / chibi ==\n' 'make-vector' >&2
		x-run ':: execute / benchmark / chibi / make-vector'
		printf -- '\n== %s / gauche ==\n' 'make-vector' >&2
		x-run ':: execute / benchmark / gauche / make-vector'
		printf -- '\n== %s / python ==\n' 'make-vector' >&2
		x-run ':: execute / benchmark / python / make-vector'
		printf -- '\n--------------------------------------------------------------------------------\n' >&2
!!

<< execute / benchmark / compare / all
	x-run ':: execute / benchmark / compare / controls'
	x-run ':: execute / benchmark / compare / loop'
	x-run ':: execute / benchmark / compare / make-cons'
	x-run ':: execute / benchmark / compare / make-vector'
!!

<< execute / bin / compiler / scheme / controls / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--controls.ss' >| './tests/scripts/_out/optimizer--controls--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--controls--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / controls / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < './tests/scripts/optimizer--controls.ss' >| './tests/scripts/_out/optimizer--controls--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--controls--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / loop / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--loop.ss' >| './tests/scripts/_out/optimizer--loop--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--loop--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / loop / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < './tests/scripts/optimizer--loop.ss' >| './tests/scripts/_out/optimizer--loop--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--loop--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-cons / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--make-cons.ss' >| './tests/scripts/_out/optimizer--make-cons--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--make-cons--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-cons / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < './tests/scripts/optimizer--make-cons.ss' >| './tests/scripts/_out/optimizer--make-cons--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--make-cons--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-vector / debug
	x-run ':: compile / bin / compiler / debug' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--make-vector.ss' >| './tests/scripts/_out/optimizer--make-vector--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--make-vector--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / make-vector / release
	x-run ':: compile / bin / compiler / release' ; env time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- ./target/release/rust-scheme-compiler < './tests/scripts/optimizer--make-vector.ss' >| './tests/scripts/_out/optimizer--make-vector--scheme-compile.out' ; exec -- less -- './tests/scripts/_out/optimizer--make-vector--scheme-compile.out'
!!

<< execute / bin / compiler / scheme / all / debug
	x-run ':: compile / bin / compiler / release'
	./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--controls.ss' >| './tests/scripts/_out/benchmark--controls--scheme-compile.out'
	./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--loop.ss' >| './tests/scripts/_out/benchmark--loop--scheme-compile.out'
	./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--make-cons.ss' >| './tests/scripts/_out/benchmark--make-cons--scheme-compile.out'
	./target/debug/rust-scheme-compiler < './tests/scripts/benchmark--make-vector.ss' >| './tests/scripts/_out/benchmark--make-vector--scheme-compile.out'
	./target/debug/rust-scheme-compiler < './tests/scripts/optimizer--controls.ss' >| './tests/scripts/_out/optimizer--controls--scheme-compile.out'
!!

<< files / edit / bin_compiler.rs
	exec -- sce ./sources/bin_compiler.rs
!!

<< files / edit / bin_interpreter.rs
	exec -- sce ./sources/bin_interpreter.rs
!!

<< files / edit / builtins.rs
	exec -- sce ./sources/builtins.rs
!!

<< files / edit / builtins_arrays.rs
	exec -- sce ./sources/builtins_arrays.rs
!!

<< files / edit / builtins_bytes.rs
	exec -- sce ./sources/builtins_bytes.rs
!!

<< files / edit / builtins_comparisons.rs
	exec -- sce ./sources/builtins_comparisons.rs
!!

<< files / edit / builtins_functions.rs
	exec -- sce ./sources/builtins_functions.rs
!!

<< files / edit / builtins_lists.rs
	exec -- sce ./sources/builtins_lists.rs
!!

<< files / edit / builtins_ports.rs
	exec -- sce ./sources/builtins_ports.rs
!!

<< files / edit / builtins_runtime.rs
	exec -- sce ./sources/builtins_runtime.rs
!!

<< files / edit / builtins_strings.rs
	exec -- sce ./sources/builtins_strings.rs
!!

<< files / edit / builtins_types.rs
	exec -- sce ./sources/builtins_types.rs
!!

<< files / edit / compiler.rs
	exec -- sce ./sources/compiler.rs
!!

<< files / edit / compiler_optimizer.rs
	exec -- sce ./sources/compiler_optimizer.rs
!!

<< files / edit / constants.rs
	exec -- sce ./sources/constants.rs
!!

<< files / edit / contexts.rs
	exec -- sce ./sources/contexts.rs
!!

<< files / edit / conversions.rs
	exec -- sce ./sources/conversions.rs
!!

<< files / edit / counters.rs
	exec -- sce ./sources/counters.rs
!!

<< files / edit / display.rs
	exec -- sce ./sources/display.rs
!!

<< files / edit / errors.rs
	exec -- sce ./sources/errors.rs
!!

<< files / edit / evaluator.rs
	exec -- sce ./sources/evaluator.rs
!!

<< files / edit / expressions.rs
	exec -- sce ./sources/expressions.rs
!!

<< files / edit / extended_procedures.rs
	exec -- sce ./sources/extended_procedures.rs
!!

<< files / edit / extended_syntaxes.rs
	exec -- sce ./sources/extended_syntaxes.rs
!!

<< files / edit / globals.rs
	exec -- sce ./sources/globals.rs
!!

<< files / edit / hashes.rs
	exec -- sce ./sources/hashes.rs
!!

<< files / edit / lambdas.rs
	exec -- sce ./sources/lambdas.rs
!!

<< files / edit / languages.rs
	exec -- sce ./sources/languages.rs
!!

<< files / edit / languages_builtins.rs
	exec -- sce ./sources/languages_builtins.rs
!!

<< files / edit / languages_r7rs.rs
	exec -- sce ./sources/languages_r7rs.rs
!!

<< files / edit / lib.rs
	exec -- sce ./sources/lib.rs
!!

<< files / edit / low-level-assertions.rs
	exec -- sce ./tests/low-level-assertions.rs
!!

<< files / edit / low-level-parser.rs
	exec -- sce ./tests/low-level-parser.rs
!!

<< files / edit / low-level-r7rs.rs
	exec -- sce ./tests/low-level-r7rs.rs
!!

<< files / edit / low-level-sizes.rs
	exec -- sce ./tests/low-level-sizes.rs
!!

<< files / edit / native_procedures.rs
	exec -- sce ./sources/native_procedures.rs
!!

<< files / edit / native_syntaxes.rs
	exec -- sce ./sources/native_syntaxes.rs
!!

<< files / edit / ordering.rs
	exec -- sce ./sources/ordering.rs
!!

<< files / edit / parser.rs
	exec -- sce ./sources/parser.rs
!!

<< files / edit / parser_peg.rs
	exec -- sce ./sources/parser_peg.rs
!!

<< files / edit / ports.rs
	exec -- sce ./sources/ports.rs
!!

<< files / edit / ports_memory.rs
	exec -- sce ./sources/ports_memory.rs
!!

<< files / edit / ports_native.rs
	exec -- sce ./sources/ports_native.rs
!!

<< files / edit / prelude.rs
	exec -- sce ./sources/prelude.rs
!!

<< files / edit / primitives.rs
	exec -- sce ./sources/primitives.rs
!!

<< files / edit / primitives_arithmetic.rs
	exec -- sce ./sources/primitives_arithmetic.rs
!!

<< files / edit / primitives_arrays.rs
	exec -- sce ./sources/primitives_arrays.rs
!!

<< files / edit / primitives_bitwise.rs
	exec -- sce ./sources/primitives_bitwise.rs
!!

<< files / edit / primitives_boolean.rs
	exec -- sce ./sources/primitives_boolean.rs
!!

<< files / edit / primitives_bytes.rs
	exec -- sce ./sources/primitives_bytes.rs
!!

<< files / edit / primitives_comparisons.rs
	exec -- sce ./sources/primitives_comparisons.rs
!!

<< files / edit / primitives_functions.rs
	exec -- sce ./sources/primitives_functions.rs
!!

<< files / edit / primitives_lists.rs
	exec -- sce ./sources/primitives_lists.rs
!!

<< files / edit / primitives_ports.rs
	exec -- sce ./sources/primitives_ports.rs
!!

<< files / edit / primitives_procedures.rs
	exec -- sce ./sources/primitives_procedures.rs
!!

<< files / edit / primitives_runtime.rs
	exec -- sce ./sources/primitives_runtime.rs
!!

<< files / edit / primitives_strings.rs
	exec -- sce ./sources/primitives_strings.rs
!!

<< files / edit / primitives_syntaxes.rs
	exec -- sce ./sources/primitives_syntaxes.rs
!!

<< files / edit / primitives_types.rs
	exec -- sce ./sources/primitives_types.rs
!!

<< files / edit / runtime.rs
	exec -- sce ./sources/runtime.rs
!!

<< files / edit / runtime_iterators.rs
	exec -- sce ./sources/runtime_iterators.rs
!!

<< files / edit / runtime_unicode.rs
	exec -- sce ./sources/runtime_unicode.rs
!!

<< files / edit / scheme.rs
	exec -- sce ./tests/scheme.rs
!!

<< files / edit / tests.rs
	exec -- sce ./sources/tests.rs
!!

<< files / edit / values.rs
	exec -- sce ./sources/values.rs
!!

<< files / edit / values_arrays.rs
	exec -- sce ./sources/values_arrays.rs
!!

<< files / edit / values_booleans.rs
	exec -- sce ./sources/values_booleans.rs
!!

<< files / edit / values_bytes.rs
	exec -- sce ./sources/values_bytes.rs
!!

<< files / edit / values_characters.rs
	exec -- sce ./sources/values_characters.rs
!!

<< files / edit / values_numbers.rs
	exec -- sce ./sources/values_numbers.rs
!!

<< files / edit / values_pairs.rs
	exec -- sce ./sources/values_pairs.rs
!!

<< files / edit / values_strings.rs
	exec -- sce ./sources/values_strings.rs
!!

<< files / edit / values_symbols.rs
	exec -- sce ./sources/values_symbols.rs
!!

<< files / edit / values_value.rs
	exec -- sce ./sources/values_value.rs
!!

<< files / edit / values_values.rs
	exec -- sce ./sources/values_values.rs
!!

<< files / view / bin_compiler.rs
	exec -- less -- ./sources/bin_compiler.rs
!!

<< files / view / bin_interpreter.rs
	exec -- less -- ./sources/bin_interpreter.rs
!!

<< files / view / builtins.rs
	exec -- less -- ./sources/builtins.rs
!!

<< files / view / builtins_arrays.rs
	exec -- less -- ./sources/builtins_arrays.rs
!!

<< files / view / builtins_bytes.rs
	exec -- less -- ./sources/builtins_bytes.rs
!!

<< files / view / builtins_comparisons.rs
	exec -- less -- ./sources/builtins_comparisons.rs
!!

<< files / view / builtins_functions.rs
	exec -- less -- ./sources/builtins_functions.rs
!!

<< files / view / builtins_lists.rs
	exec -- less -- ./sources/builtins_lists.rs
!!

<< files / view / builtins_ports.rs
	exec -- less -- ./sources/builtins_ports.rs
!!

<< files / view / builtins_runtime.rs
	exec -- less -- ./sources/builtins_runtime.rs
!!

<< files / view / builtins_strings.rs
	exec -- less -- ./sources/builtins_strings.rs
!!

<< files / view / builtins_types.rs
	exec -- less -- ./sources/builtins_types.rs
!!

<< files / view / compiler.rs
	exec -- less -- ./sources/compiler.rs
!!

<< files / view / compiler_optimizer.rs
	exec -- less -- ./sources/compiler_optimizer.rs
!!

<< files / view / constants.rs
	exec -- less -- ./sources/constants.rs
!!

<< files / view / contexts.rs
	exec -- less -- ./sources/contexts.rs
!!

<< files / view / conversions.rs
	exec -- less -- ./sources/conversions.rs
!!

<< files / view / counters.rs
	exec -- less -- ./sources/counters.rs
!!

<< files / view / display.rs
	exec -- less -- ./sources/display.rs
!!

<< files / view / errors.rs
	exec -- less -- ./sources/errors.rs
!!

<< files / view / evaluator.rs
	exec -- less -- ./sources/evaluator.rs
!!

<< files / view / expressions.rs
	exec -- less -- ./sources/expressions.rs
!!

<< files / view / extended_procedures.rs
	exec -- less -- ./sources/extended_procedures.rs
!!

<< files / view / extended_syntaxes.rs
	exec -- less -- ./sources/extended_syntaxes.rs
!!

<< files / view / globals.rs
	exec -- less -- ./sources/globals.rs
!!

<< files / view / hashes.rs
	exec -- less -- ./sources/hashes.rs
!!

<< files / view / lambdas.rs
	exec -- less -- ./sources/lambdas.rs
!!

<< files / view / languages.rs
	exec -- less -- ./sources/languages.rs
!!

<< files / view / languages_builtins.rs
	exec -- less -- ./sources/languages_builtins.rs
!!

<< files / view / languages_r7rs.rs
	exec -- less -- ./sources/languages_r7rs.rs
!!

<< files / view / lib.rs
	exec -- less -- ./sources/lib.rs
!!

<< files / view / low-level-assertions.rs
	exec -- less -- ./tests/low-level-assertions.rs
!!

<< files / view / low-level-parser.rs
	exec -- less -- ./tests/low-level-parser.rs
!!

<< files / view / low-level-r7rs.rs
	exec -- less -- ./tests/low-level-r7rs.rs
!!

<< files / view / low-level-sizes.rs
	exec -- less -- ./tests/low-level-sizes.rs
!!

<< files / view / native_procedures.rs
	exec -- less -- ./sources/native_procedures.rs
!!

<< files / view / native_syntaxes.rs
	exec -- less -- ./sources/native_syntaxes.rs
!!

<< files / view / ordering.rs
	exec -- less -- ./sources/ordering.rs
!!

<< files / view / parser.rs
	exec -- less -- ./sources/parser.rs
!!

<< files / view / parser_peg.rs
	exec -- less -- ./sources/parser_peg.rs
!!

<< files / view / ports.rs
	exec -- less -- ./sources/ports.rs
!!

<< files / view / ports_memory.rs
	exec -- less -- ./sources/ports_memory.rs
!!

<< files / view / ports_native.rs
	exec -- less -- ./sources/ports_native.rs
!!

<< files / view / prelude.rs
	exec -- less -- ./sources/prelude.rs
!!

<< files / view / primitives.rs
	exec -- less -- ./sources/primitives.rs
!!

<< files / view / primitives_arithmetic.rs
	exec -- less -- ./sources/primitives_arithmetic.rs
!!

<< files / view / primitives_arrays.rs
	exec -- less -- ./sources/primitives_arrays.rs
!!

<< files / view / primitives_bitwise.rs
	exec -- less -- ./sources/primitives_bitwise.rs
!!

<< files / view / primitives_boolean.rs
	exec -- less -- ./sources/primitives_boolean.rs
!!

<< files / view / primitives_bytes.rs
	exec -- less -- ./sources/primitives_bytes.rs
!!

<< files / view / primitives_comparisons.rs
	exec -- less -- ./sources/primitives_comparisons.rs
!!

<< files / view / primitives_functions.rs
	exec -- less -- ./sources/primitives_functions.rs
!!

<< files / view / primitives_lists.rs
	exec -- less -- ./sources/primitives_lists.rs
!!

<< files / view / primitives_ports.rs
	exec -- less -- ./sources/primitives_ports.rs
!!

<< files / view / primitives_procedures.rs
	exec -- less -- ./sources/primitives_procedures.rs
!!

<< files / view / primitives_runtime.rs
	exec -- less -- ./sources/primitives_runtime.rs
!!

<< files / view / primitives_strings.rs
	exec -- less -- ./sources/primitives_strings.rs
!!

<< files / view / primitives_syntaxes.rs
	exec -- less -- ./sources/primitives_syntaxes.rs
!!

<< files / view / primitives_types.rs
	exec -- less -- ./sources/primitives_types.rs
!!

<< files / view / runtime.rs
	exec -- less -- ./sources/runtime.rs
!!

<< files / view / runtime_iterators.rs
	exec -- less -- ./sources/runtime_iterators.rs
!!

<< files / view / runtime_unicode.rs
	exec -- less -- ./sources/runtime_unicode.rs
!!

<< files / view / scheme.rs
	exec -- less -- ./tests/scheme.rs
!!

<< files / view / tests.rs
	exec -- less -- ./sources/tests.rs
!!

<< files / view / values.rs
	exec -- less -- ./sources/values.rs
!!

<< files / view / values_arrays.rs
	exec -- less -- ./sources/values_arrays.rs
!!

<< files / view / values_booleans.rs
	exec -- less -- ./sources/values_booleans.rs
!!

<< files / view / values_bytes.rs
	exec -- less -- ./sources/values_bytes.rs
!!

<< files / view / values_characters.rs
	exec -- less -- ./sources/values_characters.rs
!!

<< files / view / values_numbers.rs
	exec -- less -- ./sources/values_numbers.rs
!!

<< files / view / values_pairs.rs
	exec -- less -- ./sources/values_pairs.rs
!!

<< files / view / values_strings.rs
	exec -- less -- ./sources/values_strings.rs
!!

<< files / view / values_symbols.rs
	exec -- less -- ./sources/values_symbols.rs
!!

<< files / view / values_value.rs
	exec -- less -- ./sources/values_value.rs
!!

<< files / view / values_values.rs
	exec -- less -- ./sources/values_values.rs
!!

<< files / edit / macros.in
	exec -- sce ./sources/macros.in
!!

<< files / edit / prelude.in
	exec -- sce ./tests/prelude.in
!!

<< files / view / macros.in
	exec -- less -- ./sources/macros.in
!!

<< files / view / prelude.in
	exec -- less -- ./tests/prelude.in
!!

<< files / edit / scheme/arithmetic.sst
	exec -- sce ./tests/scheme/arithmetic.sst
!!

<< files / edit / scheme/arrays.sst
	exec -- sce ./tests/scheme/arrays.sst
!!

<< files / edit / scheme/booleans.sst
	exec -- sce ./tests/scheme/booleans.sst
!!

<< files / edit / scheme/bytes.sst
	exec -- sce ./tests/scheme/bytes.sst
!!

<< files / edit / scheme/comparisons-equivalent-by-identity.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-by-identity.sst
!!

<< files / edit / scheme/comparisons-equivalent-by-value-coerced-recursive.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-by-value-coerced-recursive.sst
!!

<< files / edit / scheme/comparisons-equivalent-by-value-coerced.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-by-value-coerced.sst
!!

<< files / edit / scheme/comparisons-equivalent-by-value-strict-recursive.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-by-value-strict-recursive.sst
!!

<< files / edit / scheme/comparisons-equivalent-by-value-strict.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-by-value-strict.sst
!!

<< files / edit / scheme/comparisons-equivalent-objects.sst
	exec -- sce ./tests/scheme/comparisons-equivalent-objects.sst
!!

<< files / edit / scheme/comparisons-ordering-numbers.sst
	exec -- sce ./tests/scheme/comparisons-ordering-numbers.sst
!!

<< files / edit / scheme/comparisons-ordering-objects.sst
	exec -- sce ./tests/scheme/comparisons-ordering-objects.sst
!!

<< files / edit / scheme/contexts.sst
	exec -- sce ./tests/scheme/contexts.sst
!!

<< files / edit / scheme/control.sst
	exec -- sce ./tests/scheme/control.sst
!!

<< files / edit / scheme/functions-arrays.sst
	exec -- sce ./tests/scheme/functions-arrays.sst
!!

<< files / edit / scheme/functions-bytes.sst
	exec -- sce ./tests/scheme/functions-bytes.sst
!!

<< files / edit / scheme/functions-lists.sst
	exec -- sce ./tests/scheme/functions-lists.sst
!!

<< files / edit / scheme/functions-strings.sst
	exec -- sce ./tests/scheme/functions-strings.sst
!!

<< files / edit / scheme/functions.sst
	exec -- sce ./tests/scheme/functions.sst
!!

<< files / edit / scheme/issues.sst
	exec -- sce ./tests/scheme/issues.sst
!!

<< files / edit / scheme/lambdas.sst
	exec -- sce ./tests/scheme/lambdas.sst
!!

<< files / edit / scheme/lists.sst
	exec -- sce ./tests/scheme/lists.sst
!!

<< files / edit / scheme/loops.sst
	exec -- sce ./tests/scheme/loops.sst
!!

<< files / edit / scheme/pairs.sst
	exec -- sce ./tests/scheme/pairs.sst
!!

<< files / edit / scheme/ports-memory.sst
	exec -- sce ./tests/scheme/ports-memory.sst
!!

<< files / edit / scheme/ports-native.sst
	exec -- sce ./tests/scheme/ports-native.sst
!!

<< files / edit / scheme/ports.sst
	exec -- sce ./tests/scheme/ports.sst
!!

<< files / edit / scheme/quotation.sst
	exec -- sce ./tests/scheme/quotation.sst
!!

<< files / edit / scheme/runtime.sst
	exec -- sce ./tests/scheme/runtime.sst
!!

<< files / edit / scheme/scratchpad.sst
	exec -- sce ./tests/scheme/scratchpad.sst
!!

<< files / edit / scheme/strings.sst
	exec -- sce ./tests/scheme/strings.sst
!!

<< files / edit / scheme/types.sst
	exec -- sce ./tests/scheme/types.sst
!!

<< files / edit / scheme/values.sst
	exec -- sce ./tests/scheme/values.sst
!!

<< files / view / scheme/arithmetic.sst
	exec -- less -- ./tests/scheme/arithmetic.sst
!!

<< files / view / scheme/arrays.sst
	exec -- less -- ./tests/scheme/arrays.sst
!!

<< files / view / scheme/booleans.sst
	exec -- less -- ./tests/scheme/booleans.sst
!!

<< files / view / scheme/bytes.sst
	exec -- less -- ./tests/scheme/bytes.sst
!!

<< files / view / scheme/comparisons-equivalent-by-identity.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-by-identity.sst
!!

<< files / view / scheme/comparisons-equivalent-by-value-coerced-recursive.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-by-value-coerced-recursive.sst
!!

<< files / view / scheme/comparisons-equivalent-by-value-coerced.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-by-value-coerced.sst
!!

<< files / view / scheme/comparisons-equivalent-by-value-strict-recursive.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-by-value-strict-recursive.sst
!!

<< files / view / scheme/comparisons-equivalent-by-value-strict.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-by-value-strict.sst
!!

<< files / view / scheme/comparisons-equivalent-objects.sst
	exec -- less -- ./tests/scheme/comparisons-equivalent-objects.sst
!!

<< files / view / scheme/comparisons-ordering-numbers.sst
	exec -- less -- ./tests/scheme/comparisons-ordering-numbers.sst
!!

<< files / view / scheme/comparisons-ordering-objects.sst
	exec -- less -- ./tests/scheme/comparisons-ordering-objects.sst
!!

<< files / view / scheme/contexts.sst
	exec -- less -- ./tests/scheme/contexts.sst
!!

<< files / view / scheme/control.sst
	exec -- less -- ./tests/scheme/control.sst
!!

<< files / view / scheme/functions-arrays.sst
	exec -- less -- ./tests/scheme/functions-arrays.sst
!!

<< files / view / scheme/functions-bytes.sst
	exec -- less -- ./tests/scheme/functions-bytes.sst
!!

<< files / view / scheme/functions-lists.sst
	exec -- less -- ./tests/scheme/functions-lists.sst
!!

<< files / view / scheme/functions-strings.sst
	exec -- less -- ./tests/scheme/functions-strings.sst
!!

<< files / view / scheme/functions.sst
	exec -- less -- ./tests/scheme/functions.sst
!!

<< files / view / scheme/issues.sst
	exec -- less -- ./tests/scheme/issues.sst
!!

<< files / view / scheme/lambdas.sst
	exec -- less -- ./tests/scheme/lambdas.sst
!!

<< files / view / scheme/lists.sst
	exec -- less -- ./tests/scheme/lists.sst
!!

<< files / view / scheme/loops.sst
	exec -- less -- ./tests/scheme/loops.sst
!!

<< files / view / scheme/pairs.sst
	exec -- less -- ./tests/scheme/pairs.sst
!!

<< files / view / scheme/ports-memory.sst
	exec -- less -- ./tests/scheme/ports-memory.sst
!!

<< files / view / scheme/ports-native.sst
	exec -- less -- ./tests/scheme/ports-native.sst
!!

<< files / view / scheme/ports.sst
	exec -- less -- ./tests/scheme/ports.sst
!!

<< files / view / scheme/quotation.sst
	exec -- less -- ./tests/scheme/quotation.sst
!!

<< files / view / scheme/runtime.sst
	exec -- less -- ./tests/scheme/runtime.sst
!!

<< files / view / scheme/scratchpad.sst
	exec -- less -- ./tests/scheme/scratchpad.sst
!!

<< files / view / scheme/strings.sst
	exec -- less -- ./tests/scheme/strings.sst
!!

<< files / view / scheme/types.sst
	exec -- less -- ./tests/scheme/types.sst
!!

<< files / view / scheme/values.sst
	exec -- less -- ./tests/scheme/values.sst
!!

