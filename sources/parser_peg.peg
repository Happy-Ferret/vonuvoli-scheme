

use super::constants::exports as constants;
use super::values::exports as values;
use super::tests::exports as tests;

use std::char;
use std::str::FromStr;




pub value_full -> values::Value = space? value : value space? { value }

value -> values::Value = abbreviation / list / array / atom

atom -> values::Value = boolean / number / symbol / character / string / bytes / constant

list -> values::Value = list_empty / list_proper / list_dotted
list_proper -> values::Value = "(" space? elements : value ** space space? ")" { values::list_new (elements) }
list_dotted -> values::Value = "(" space? elements : value ++ space space "." space last : value space? ")" { values::list_dotted_new (elements, last) }
list_empty -> values::Value = ( "(" space? ")" / "#null" ) { constants::NULL.into () }

array -> values::Value = "#(" space? elements : value ** space space? ")" {  values::array_new (elements) .into () }

abbreviation -> values::Value = abbreviation : abbreviation_prefix whitespace? value : value { values::list_new (vec! [abbreviation, value]) }
abbreviation_prefix -> values::Value = value : $( "'" / "`" / ",@" / "," ) {?
		match value {
			"'" => Ok (values::symbol_clone_str ("quote").into ()),
			"`" => Ok (values::symbol_clone_str ("quasiquote").into ()),
			"," => Ok (values::symbol_clone_str ("unquote").into ()),
			",@" => Ok (values::symbol_clone_str ("unquote-splicing").into ()),
			_ => Err ("a2007ac4"),
		}
	}

boolean -> values::Value = boolean_true / boolean_false
boolean_true -> values::Value = "#true" { constants::TRUE.into () } / "#t" { constants::TRUE.into () }
boolean_false -> values::Value = "#false" { constants::FALSE.into () } / "#f" { constants::FALSE.into () }

number -> values::Value = value : ( number_real / number_integer ) !symbol_character_glyph { value.into () }
number_sign = ( "+" / "-" )

number_integer -> values::Value = number_integer_2 / number_integer_8 / number_integer_10 / number_integer_16
number_integer_2 -> values::Value = ( "#b" / "#B" ) value : $( number_sign? [0-1]+ ) {? i64::from_str_radix (value, 2) .map (|value| values::number_i64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_integer_8 -> values::Value = ( "#o" / "#O" ) value : $( number_sign? [0-7]+ ) {? i64::from_str_radix (value, 8) .map (|value| values::number_i64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_integer_10 -> values::Value = ( "#d" / "#D" )? value : $( number_sign? [0-9]+ ) {? i64::from_str_radix (value, 10) .map (|value| values::number_i64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_integer_16 -> values::Value = ( "#x" / "#X" ) value : $( number_sign? ( [0-9a-f]+ / [0-9A-F]+ ) ) {? i64::from_str_radix (value, 16) .map (|value| values::number_i64 (value) .into ()) .map_err (|_| "invalid real syntax") }

number_real -> values::Value = number_real_variant_1 / number_real_variant_2 / number_real_variant_3 / number_real_variant_4 / number_real_inf / number_real_nan
number_real_variant_1 -> values::Value = value : $( number_sign? [0-9]+ "." [0-9]+ number_real_exponent? ) {? f64::from_str (value) .map (|value| values::number_f64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_real_variant_2 -> values::Value = value : $( number_sign? [0-9]+ "." number_real_exponent? ) {? f64::from_str (value) .map (|value| values::number_f64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_real_variant_3 -> values::Value = value : $( number_sign? "." [0-9]+ number_real_exponent? ) {? f64::from_str (value) .map (|value| values::number_f64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_real_variant_4 -> values::Value = value : $( number_sign? [0-9]+ number_real_exponent ) {? f64::from_str (value) .map (|value| values::number_f64 (value) .into ()) .map_err (|_| "invalid real syntax") }
number_real_inf -> values::Value = number_real_inf_positive / number_real_inf_negative
number_real_inf_positive -> values::Value = &"+" number_sign "inf" ".0"? { constants::INF_POSITIVE.into () }
number_real_inf_negative -> values::Value = &"-" number_sign "inf" ".0"? { constants::INF_NEGATIVE.into () }
number_real_nan -> values::Value = number_real_nan_positive / number_real_nan_negative
number_real_nan_positive -> values::Value = &"+" number_sign "nan" ".0"? { constants::NAN_POSITIVE.into () }
number_real_nan_negative -> values::Value = &"-" number_sign "nan" ".0"? { constants::NAN_NEGATIVE.into () }
number_real_exponent = ( "e" / "E" ) number_sign? [0-9]+

character -> values::Value = character_glyph / character_escaped / character_named
character_glyph -> values::Value = "#\\" glyph : $( . ) !atom { values::character (glyph.chars () .next () .expect ("36da249a")) .into () }
character_escaped -> values::Value = ( "#\\x" / "#\\X" ) value : $( [0-9a-f]+ / [0-9A-F]+ ) {? u32::from_str_radix (value, 16) .map_err (|_| "invalid character syntax") .and_then (|value| char::from_u32 (value) .ok_or ("invalid character value")) .map (|character| values::character (character) .into ()) }
character_named -> values::Value = "#\\" value : $( "alarm" / "backspace" / "delete" / "escape" / "newline" / "null" / "return" / "space" / "tab" ) {?
		match value {
			"alarm" => Ok (values::character (7 as char) .into ()),
			"backspace" => Ok (values::character (8 as char) .into ()),
			"delete" => Ok (values::character (127 as char) .into ()),
			"escape" => Ok (values::character (27 as char) .into ()),
			"newline" => Ok (values::character (10 as char) .into ()),
			"null" => Ok (values::character (0 as char) .into ()),
			"return" => Ok (values::character (13 as char) .into ()),
			"space" => Ok (values::character (32 as char) .into ()),
			"tab" => Ok (values::character (9 as char) .into ()),
			_ => Err ("fcfc68be"),
		}
	}

symbol -> values::Value = symbol_multiple_characters / symbol_single_character / symbol_string
symbol_single_character -> values::Value = !"." value : $( symbol_character_glyph ) { values::symbol_clone_str (value) .into () }
symbol_multiple_characters -> values::Value = value : $( symbol_character_glyph symbol_character_glyph+ ) { values::symbol_clone_str (value) .into () }
symbol_character_glyph = [a-zA-Z] / [!$%&*/:<=>?^_~] / [0-9] / [@.+-]

symbol_string -> values::Value = "|" elements : symbol_string_character* "|" { values::symbol_clone_characters (elements.as_slice ()) .into () }
symbol_string_character -> char = symbol_string_character_glyph / string_character_escaped / string_character_named
symbol_string_character_glyph -> char = glyph : $( [^|\\] ) { glyph.chars () .next () .expect ("56031166") }

string -> values::Value = "\"" elements : string_character* "\"" { values::string_clone_characters (elements.as_slice ()) .into () }
string_character -> char = string_character_glyph / string_character_escaped / string_character_named
string_character_glyph -> char = glyph : $( [^"\\] ) { glyph.chars () .next () .expect ("61d18567") }
string_character_escaped -> char = ( "\\x" / "\\X" ) value : $( [0-9a-f]+ / [0-9A-F]+ ) ";" {? u32::from_str_radix (value, 16) .map_err (|_| "invalid character syntax") .and_then (|value| char::from_u32 (value) .ok_or ("invalid character value")) }
string_character_named -> char = "\\" value : $( "a" / "b" / "t" / "n" / "r" ) {?
		match value {
			"a" => Ok (7 as char),
			"b" => Ok (8 as char),
			"n" => Ok (10 as char),
			"r" => Ok (13 as char),
			"t" => Ok (9 as char),
			_ => Err ("285687fe"),
		}
	}

bytes -> values::Value = ( "#u8" / "#U8" ) "(" space? elements : bytes_byte ** space space?  ")" { values::bytes_new (elements) .into () }
bytes_byte -> u8 = value : $( [0-9]+ ) {? u8::from_str (value) .map_err (|_| "invalid byte syntax") }

constant -> values::Value = "#void" { constants::VOID.into () } / "#undefined" { constants::UNDEFINED.into () }

comment = #quiet< comment_line / comment_nested / comment_value >
comment_line = #quiet< ";" .* "\n" >
comment_nested = #quiet< "#|" ( !("#|" / "|#") . . )* comment_nested* ( !("#|" / "|#") . . )* >
comment_value = "#;" whitespace value

whitespace = #quiet< [ \t\n]+ >
space = ( whitespace / comment )+




pub tests -> Vec<tests::TestCase> = space? tests : test* space? { tests }

pub test -> tests::TestCase = space? test : test_case ( "//" space? value space? )? ";" space? { test }
test_case -> tests::TestCase = value : value space? "=>" space? action : test_action space? { tests::TestCase { value : value, action : action } }
test_action -> tests::TestAction =
		( "!debug" space value ) { tests::TestAction::Debug } /
		"!debug" { tests::TestAction::Debug } /
		( "!ignore" space value ) { tests::TestAction::Ignore } /
		"!ignore" { tests::TestAction::Ignore } /
		( "!fixme" space value ) { tests::TestAction::Skip } /
		"!fixme" { tests::TestAction::Skip } /
		( "!skip" space value ) { tests::TestAction::Skip } /
		"!skip" { tests::TestAction::Skip } /
		value : value { tests::TestAction::Expect (value) }

