

use super::values;

use std::char;
use std::f64;
use std::str::FromStr;


pub value_full -> values::Value = value


value -> values::Value = list / array / abbreviation / atom

atom -> values::Value = boolean / number / symbol / character / string / bytes

list -> values::Value = list_empty / list_proper / list_dotted
list_proper -> values::Value = "(" space? elements : value ++ space space? ")" { values::list_from_slice (elements.as_slice ()) }
list_dotted -> values::Value = "(" space? elements : value ++ space space "." space last : value space? ")" { values::list_from_slice_2 (elements.as_slice (), last) }
list_empty -> values::Value = ( "(" space? ")" / "#null" ) { values::NULL }

array -> values::Value = "#(" space? elements : value ** space space? ")" {  values::array_from_slice (elements.as_slice ()) }

abbreviation -> values::Value = abbreviation_prefix whitespace? value { values::UNIMPLEMENTED }
abbreviation_prefix = "'" / "`" / "," / ",@"

boolean -> values::Value = boolean_true / boolean_false
boolean_true -> values::Value = "#true" { values::TRUE } / "#t" { values::TRUE }
boolean_false -> values::Value = "#false" { values::FALSE } / "#f" { values::FALSE }

symbol -> values::Value = symbol_multiple_characters / symbol_single_character
symbol_single_character -> values::Value = !"." value : $( symbol_character ) { values::symbol (value) }
symbol_multiple_characters -> values::Value = value : $( symbol_character symbol_character+ ) { values::symbol (value) }
symbol_character = [a-zA-Z] / [!$%&*/:<=>?^_~] / [0-9] / [@.+-]

number -> values::Value = value : ( number_real / number_integer ) !symbol_character { value }

number_integer -> values::Value = number_integer_2 / number_integer_8 / number_integer_10 / number_integer_16
number_integer_2 -> values::Value = ( "#b" / "#B" ) value : $( number_sign? [0-1]+ ) {? i64::from_str_radix (value, 2) .map (values::number_integer) .map_err (|_| "invalid real syntax") }
number_integer_8 -> values::Value = ( "#o" / "#O" ) value : $( number_sign? [0-7]+ ) {? i64::from_str_radix (value, 8) .map (values::number_integer) .map_err (|_| "invalid real syntax") }
number_integer_10 -> values::Value = ( "#d" / "#D" )? value : $( number_sign? [0-9]+ ) {? i64::from_str_radix (value, 10) .map (values::number_integer) .map_err (|_| "invalid real syntax") }
number_integer_16 -> values::Value = ( "#x" / "#X" ) value : $( number_sign? ( [0-9a-f]+ / [0-9A-F]+ ) ) {? i64::from_str_radix (value, 16) .map (values::number_integer) .map_err (|_| "invalid real syntax") }
number_real -> values::Value = number_real_variant_1 / number_real_variant_2 / number_real_variant_3 / number_real_variant_4 / number_real_inf / number_real_nan
number_real_variant_1 -> values::Value = value : $( number_sign? [0-9]+ "." [0-9]+ number_real_exponent? ) {? f64::from_str (value) .map (values::number_real) .map_err (|_| "invalid real syntax") }
number_real_variant_2 -> values::Value = value : $( number_sign? [0-9]+ "." number_real_exponent? ) {? f64::from_str (value) .map (values::number_real) .map_err (|_| "invalid real syntax") }
number_real_variant_3 -> values::Value = value : $( number_sign? "." [0-9]+ number_real_exponent? ) {? f64::from_str (value) .map (values::number_real) .map_err (|_| "invalid real syntax") }
number_real_variant_4 -> values::Value = value : $( number_sign? [0-9]+ number_real_exponent ) {? f64::from_str (value) .map (values::number_real) .map_err (|_| "invalid real syntax") }
number_real_inf -> values::Value = number_real_inf_positive / number_real_inf_negative
number_real_inf_positive -> values::Value = &"+" number_sign "inf" ".0"? { values::number_real (f64::INFINITY) }
number_real_inf_negative -> values::Value = &"-" number_sign "inf" ".0"? { values::number_real (f64::NEG_INFINITY) }
number_real_nan -> values::Value = number_sign "nan" ".0"? { values::number_real (f64::NAN) }
number_real_exponent = ( "e" / "E" ) number_sign? [0-9]+
number_sign = ( "+" / "-" )

character -> values::Value = character_value / character_symbol / character_raw
character_raw -> values::Value = "#\\" glyph : $( . ) !atom { values::character (glyph.chars () .next () .expect ("36da249a")) }
character_value -> values::Value = ( "#\\x" / "#\\X" ) value : $( [0-9a-f]+ / [0-9A-F]+ ) {? u32::from_str_radix (value, 16) .map_err (|_| "invalid character syntax") .and_then (|value| char::from_u32 (value) .ok_or ("invalid character value")) .map (values::character) }
character_symbol -> values::Value = "#\\" value : $( "alarm" / "backspace" / "delete" / "escape" / "newline" / "null" / "return" / "space" / "tab" ) {
		match value {
			"alarm" => values::character (7 as char),
			"backspace" => values::character (8 as char),
			"delete" => values::character (127 as char),
			"escape" => values::character (27 as char),
			"newline" => values::character (10 as char),
			"null" => values::character (0 as char),
			"return" => values::character (13 as char),
			"space" => values::character (32 as char),
			"tab" => values::character (9 as char),
			_ => panic! ("1ffc0535"),
		}
	}

string -> values::Value = "\"" elements : string_character* "\"" { values::string_from_slice (elements.as_slice ()) }
string_character -> char = string_character_raw / string_character_value / string_character_symbol
string_character_raw -> char = !["\\] glyph : $( . ) { glyph.chars () .next () .expect ("61d18567") }
string_character_value -> char = ( "\\x" / "\\X" ) value : $( [0-9a-f]+ / [0-9A-F]+ ) ";" {? u32::from_str_radix (value, 16) .map_err (|_| "invalid character syntax") .and_then (|value| char::from_u32 (value) .ok_or ("invalid character value")) }
string_character_symbol -> char = "\\" value : $( "a" / "b" / "t" / "n" / "r" ) {
		match value {
			"a" => 7 as char,
			"b" => 8 as char,
			"n" => 10 as char,
			"r" => 13 as char,
			"t" => 9 as char,
			_ => panic! ("44fb494c"),
		}
	}

bytes -> values::Value = ( "#u8" / "#U8" ) "(" space? elements : bytes_byte ** space space?  ")" { values::bytes_from_slice (elements.as_slice ()) }
bytes_byte -> u8 = value : $( [0-9]+ ) {? u8::from_str (value) .map_err (|_| "invalid byte syntax") }

comment = comment_line / comment_nested / comment_value
comment_line = #quiet< ";" .* "\n" >
comment_nested = #quiet< "#|" ( !("#|" / "|#") . . )* comment_nested* ( !("#|" / "|#") . . )* >
comment_value = "#;" whitespace value

whitespace = #quiet< [ \t\n]+ >
space = ( whitespace / comment )+

