
(define (fn-1 value_1) (+ value_1)) => !ignore;
(define (fn-2 value_1 value_2) (+ value_1 value_2)) => !ignore;




(vector-map fn-1 #()) => #();
(vector-map fn-1 #() #()) => !fixme #();

(vector-map fn-2 #()) => !fixme #();
(vector-map fn-2 #() #()) => #();

(vector-map fn-2 #(1 2) #(3 4)) => #(4 6);
(vector-map fn-2 #(1 2 0) #(3 4)) => #(4 6);
(vector-map fn-2 #(1 2) #(3 4 0)) => #(4 6);




(vector-for-each fn-1 #()) => #void;
(vector-for-each fn-1 #() #()) => !fixme #void;

(vector-for-each fn-2 #()) => !fixme #void;
(vector-for-each fn-2 #() #()) => #void;

(vector-for-each fn-2 #(1 2) #(3 4)) => #void;
(vector-for-each fn-2 #(1 2 0) #(3 4)) => #void;
(vector-for-each fn-2 #(1 2) #(3 4 0)) => #void;




(vector-map fn-1 #()) => #();
(vector-map fn-1 #(0)) => #(0);
(vector-map fn-1 #(0 1)) => #(0 1);
(vector-map fn-1 #(0 1 2)) => #(0 1 2);
(vector-map fn-1 #(0 1 2 3)) => #(0 1 2 3);
(vector-map fn-1 #(0 1 2 3 4)) => #(0 1 2 3 4);

(vector-for-each fn-1 #()) => #void;
(vector-for-each fn-1 #(0)) => #void;
(vector-for-each fn-1 #(0 1)) => #void;
(vector-for-each fn-1 #(0 1 2)) => #void;
(vector-for-each fn-1 #(0 1 2 3)) => #void;
(vector-for-each fn-1 #(0 1 2 3 4)) => #void;

